// Place your key bindings in this file to override the defaultsauto[]
[
    {
        "key": "alt+,",
        "command": "editor.action.addSelectionToPreviousFindMatch"
    },
    {
        "key": "alt+.",
        "command": "editor.action.addSelectionToNextFindMatch"
    },
    {
        "key": "alt+backspace",
        "command": "git.clean",
        "when": "activeViewlet == 'workbench.view.scm'"
    },
    {
        "key": "alt+d",
        "command": "editor.action.deleteLines",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "alt+f12",
        "command": "workbench.action.openGlobalKeybindings"
    },
    {
        "key": "alt+f3",
        "command": "workbench.action.replaceInFiles"
    },
    {
        "key": "alt+k",
        "command": "-keybindings.editor.recordSearchKeys",
        "when": "inKeybindings && inKeybindingsSearch"
    },
    {
        "key": "alt+l",
        "command": "-toggleFindInSelection",
        "when": "editorFocus"
    },
    {
        "key": "alt+l",
        "command": "-toggleSearchEditorContextLines",
        "when": "inSearchEditor"
    },
    {
        "key": "alt+left",
        "command": "-workbench.action.terminal.focusPreviousPane",
        "when": "terminalFocus"
    },
    {
        "key": "alt+left",
        "command": "workbench.action.previousEditor",
        "when": "!terminalFocus"
    },
    {
        "key": "alt+left",
        "command": "workbench.action.terminal.focusPrevious",
        "when": "terminalFocus"
    },
    {
        "key": "alt+m",
        "command": "editor.action.selectHighlights",
        "when": "editorFocus"
    },
    {
        "key": "alt+meta+left",
        "command": "workbench.action.moveEditorLeftInGroup"
    },
    {
        "key": "alt+meta+right",
        "command": "workbench.action.moveEditorRightInGroup"
    },
    {
        "key": "alt+pagedown",
        "command": "-scrollPageDown",
        "when": "textInputFocus"
    },
    {
        "key": "alt+pagedown",
        "command": "workbench.action.focusNextGroup"
    },
    {
        "key": "alt+pageup",
        "command": "-scrollPageUp",
        "when": "textInputFocus"
    },
    {
        "key": "alt+pageup",
        "command": "workbench.action.focusPreviousGroup"
    },
    {
        "key": "alt+right",
        "command": "-workbench.action.terminal.focusNextPane",
        "when": "terminalFocus"
    },
    {
        "key": "alt+right",
        "command": "workbench.action.nextEditor",
        "when": "!terminalFocus"
    },
    {
        "key": "alt+right",
        "command": "workbench.action.terminal.focusNext",
        "when": "terminalFocus"
    },
    {
        "key": "alt+t",
        "command": "workbench.action.showAllSymbols"
    },
    {
        "key": "ctrl+b",
        "command": "-workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "ctrl+b",
        "command": "editor.action.revealDefinition"
    },
    {
        "key": "ctrl+d",
        "command": "editor.action.copyLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+f",
        "command": "workbench.action.terminal.focusFindWidget",
        "when": "terminalFindWidgetFocused || terminalFocus"
    },
    {
        "key": "ctrl+j",
        "command": "-workbench.action.togglePanel"
    },
    {
        "key": "ctrl+q",
        "command": "-workbench.action.quit"
    },
    {
        "key": "ctrl+q",
        "command": "workbench.action.navigateToLastEditLocation"
    },
    {
        "key": "ctrl+r",
        "command": "-amVim.ctrl+r",
        "when": "amVim.configuration.shouldBindCtrlCommands && editorTextFocus && amVim.mode == 'NORMAL'"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.openRecent"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.quickOpenNavigateNextInRecentFilesPicker",
        "when": "inQuickOpen && inRecentFilesPicker"
    },
    {
        "key": "ctrl+shift+`",
        "command": "-workbench.action.terminal.new"
    },
    {
        "key": "ctrl+shift+c",
        "command": "-workbench.action.terminal.openNativeConsole",
        "when": "!terminalFocus"
    },
    {
        "key": "ctrl+shift+e",
        "command": "-workbench.view.explorer"
    },
    {
        "key": "ctrl+shift+g",
        "command": "-workbench.view.scm"
    },
    {
        "key": "ctrl+shift+i",
        "command": "-editor.action.formatDocument",
        "when": "editorHasDocumentFormattingProvider && editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+k",
        "command": "-editor.action.deleteLines",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+l",
        "command": "-editor.action.selectHighlights",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+shift+m",
        "command": "-workbench.actions.view.problems"
    },
    {
        "key": "ctrl+shift+o",
        "command": "-workbench.action.gotoSymbol"
    },
    {
        "key": "ctrl+shift+pagedown",
        "command": "-workbench.action.moveEditorRightInGroup"
    },
    {
        "key": "ctrl+shift+pageup",
        "command": "-workbench.action.moveEditorLeftInGroup"
    },
    {
        "key": "ctrl+shift+x",
        "command": "-workbench.view.extensions"
    },
    {
        "key": "ctrl+t",
        "command": "-workbench.action.showAllSymbols"
    },
    {
        "key": "ctrl+t",
        "command": "workbench.action.gotoSymbol"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeActiveEditor"
    },
    {
        "key": "ctrl+w",
        "command": "workbench.action.closeActiveEditor",
        "when": "!terminalFocus"
    },
    {
        "key": "ctrl+w",
        "command": "workbench.action.terminal.kill",
        "when": "terminalFocus"
    },
    {
        "key": "f1",
        "command": "-workbench.action.showCommands"
    },
    {
        "key": "f1",
        "command": "workbench.action.quickOpen"
    },
    // {
    //     "key": "f1",
    //     "command": "workbench.action.terminal.sendSequence",
    //     "args": {
    //         "text": "EDITOR=code; fzf --preview 'batcat --style=numbers --color=always --line-range :500 {}' \u000D"
    //     }
    // },
    {
        "key": "f10",
        "command": "-extension.node-debug.startWithStopOnEntry",
        "when": "!inDebugMode && debugConfigurationType == 'node'"
    },
    {
        "key": "f10",
        "command": "-workbench.action.debug.stepOver",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "f12",
        "command": "-editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "f12",
        "command": "-editor.gotoNextSymbolFromResult",
        "when": "hasSymbols"
    },
    {
        "key": "f12",
        "command": "workbench.action.openSettings"
    },
    {
        "key": "f2 alt+t",
        "command": "workbench.action.terminal.new"
    },
    {
        "key": "f2 shift+d",
        "command": "workbench.view.extension.dockerView"
    },
    {
        "key": "f2 e",
        "command": "workbench.view.explorer"
    },
    {
        "key": "f2 f",
        "command": "git.openFile",
        "when": "textCompareEditorVisible"
    },
    {
        "key": "f2 f",
        "command": "workbench.files.action.showActiveFileInExplorer",
        "when": "!textCompareEditorVisible"
    },
    {
        "key": "f2 f1",
        "command": "workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "f2 f2",
        "command": "workbench.action.togglePanel"
    },
    {
        "key": "f2 f3",
        "command": "workbench.action.toggleMaximizedPanel"
    },
    {
        "key": "f2 g",
        "command": "workbench.view.scm"
    },
    {
        "key": "f2 h",
        "command": "timeline.focus"
    },
    {
        "key": "f2 o",
        "command": "workbench.action.output.toggleOutput"
    },
    {
        "key": "f2 p",
        "command": "workbench.actions.view.problems"
    },
    {
        "key": "f2 t",
        "command": "workbench.action.terminal.toggleTerminal"
    },
    {
        "key": "f2 x",
        "command": "workbench.view.extensions"
    },
    {
        "key": "f2",
        "command": "-debug.renameWatchExpression",
        "when": "watchExpressionsFocused"
    },
    {
        "key": "f2",
        "command": "-debug.setVariable",
        "when": "variablesFocused"
    },
    {
        "key": "f2",
        "command": "-editor.action.rename",
        "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "f2",
        "command": "-remote.tunnel.label",
        "when": "tunnelViewFocus && tunnelType == 'Forwarded'"
    },
    {
        "key": "f2",
        "command": "-renameFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "f3",
        "command": "-editor.action.nextMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "f3",
        "command": "-workbench.action.terminal.findNext",
        "when": "terminalFindWidgetFocused"
    },
    {
        "key": "f3",
        "command": "-workbench.action.terminal.findNext",
        "when": "terminalFocus"
    },
    {
        "key": "f3",
        "command": "workbench.action.findInFiles"
    },
    {
        "key": "f4",
        "command": "workbench.action.showCommands"
    },
    {
        "key": "f5 alt+m",
        "command": "workbench.action.tasks.runTask",
        "args": "migrate-redo"
    },
    {
        "key": "f5 c",
        "command": "workbench.action.terminal.sendSequence",
        "args": {
            "text": "make app-rails-console\u000D"
        }
    },
    {
        "key": "f5 f",
        "command": "workbench.action.tasks.runTask",
        "args": "app-fixture-prepare"
    },
    {
        "key": "f5 m",
        "command": "workbench.action.tasks.runTask",
        "args": "migrate"
    },
    {
        "key": "f5 r",
        "command": "workbench.action.terminal.sendSequence",
        "args": {
            "text": "make compose-restart\u000D"
        }
    },
    {
        "key": "f5",
        "command": "-workbench.action.debug.continue",
        "when": "inDebugMode"
    },
    {
        "key": "f5",
        "command": "-workbench.action.debug.start",
        "when": "!inDebugMode"
    },
    {
        "key": "f6",
        "command": "-workbench.action.debug.pause",
        "when": "debugState == 'running'"
    },
    {
        "key": "f6",
        "command": "-workbench.action.focusNextPart"
    },
    {
        "key": "f7",
        "command": "-editor.action.diffReview.next",
        "when": "isInDiffEditor"
    },
    {
        "key": "f7",
        "command": "-editor.action.wordHighlight.next",
        "when": "editorTextFocus && hasWordHighlights"
    },
    {
        "key": "f8",
        "command": "-editor.action.marker.nextInFiles",
        "when": "editorFocus && !editorReadonly"
    },
    {
        "key": "f8",
        "command": "-editor.action.marker.nextInFiles",
        "when": "editorFocus"
    },
    {
        "key": "f8",
        "command": "editor.action.formatDocument",
        "when": "editorHasDocumentFormattingProvider && editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "f9",
        "command": "-editor.debug.action.toggleBreakpoint",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+/",
        "command": "editor.action.blockComment",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+a",
        "command": "-editor.action.blockComment",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+right",
        "command": "-editor.action.smartSelect.expand",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+s",
        "command": "editor.action.smartSelect.shrink",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+left",
        "command": "-editor.action.smartSelect.shrink",
        "when": "editorTextFocus"
    },
    {
        "key": "f5 f1",
        "command": "workbench.action.tasks.runTask",
        "args": "f5-f1",
    },
    {
        "key": "f5 f2",
        "command": "workbench.action.tasks.runTask",
        "args": "f5-f2",
    },
    {
        "key": "f5 f3",
        "command": "workbench.action.tasks.runTask",
        "args": "f5-f3",
    },
    {
        "key": "f5 f4",
        "command": "workbench.action.tasks.runTask",
        "args": "f5-f4",
    },
    {
        "key": "f5 f6",
        "command": "workbench.action.tasks.runTask",
        "args": "f5-f6",
    },
    {
        "key": "f5 f7",
        "command": "workbench.action.tasks.runTask",
        "args": "f5-f7",
    },
    {
        "key": "f5 f8",
        "command": "workbench.action.tasks.runTask",
        "args": "f5-f8",
    },
    {
        "key": "f5 f9",
        "command": "workbench.action.tasks.runTask",
        "args": "f5-f9",
    },
    {
        "key": "f5 f10",
        "command": "workbench.action.tasks.runTask",
        "args": "f5-f10",
    },
    {
        "key": "f5 f11",
        "command": "workbench.action.tasks.runTask",
        "args": "f5-f11",
    },
    {
        "key": "f5 f12",
        "command": "workbench.action.tasks.runTask",
        "args": "f5-f12",
    },
    {
        "key": "meta+t meta+l",
        "command": "-phpunit.rerun",
        "when": "editorTextFocus && editorLangId == 'php'"
    },
    {
        "key": "meta+t meta+s",
        "command": "-phpunit.run-all"
    },
    {
        "key": "meta+t meta+f",
        "command": "-phpunit.run-file",
        "when": "editorTextFocus && editorLangId == 'php'"
    },
    {
        "key": "meta+t meta+t",
        "command": "-phpunit.run-test-at-cursor",
        "when": "editorTextFocus && editorLangId == 'php'"
    },
    {
        "key": "f5 f5",
        "command": "workbench.action.tasks.reRunTask"
    },
    {
        "key": "f2 right",
        "command": "workbench.action.moveEditorToRightGroup"
    },
    {
        "key": "f2 left",
        "command": "workbench.action.moveEditorToLeftGroup"
    },
    {
        "key": "f2 down",
        "command": "workbench.action.moveEditorToBelowGroup"
    },
    {
        "key": "f2 up",
        "command": "workbench.action.moveEditorToAboveGroup"
    },
    {
        "key": "shift+alt+-",
        "command": "workbench.action.decreaseViewSize"
    },
    {
        "key": "shift+alt+=",
        "command": "workbench.action.increaseViewSize"
    },
    {
        "key": "alt+v",
        "command": "toggleVim"
    },
    {
        "key": "ctrl+alt+k",
        "command": "-bookmarks.toggle",
        "when": "editorTextFocus"
    },
    {
        "key": "f2 b",
        "command": "workbench.view.extension.bookmarks"
    },
    {
        "key": "alt+h",
        "command": "workbench.action.compareEditor.nextChange",
        "when": "textCompareEditorVisible"
    },
    {
        "key": "alt+f5",
        "command": "-workbench.action.compareEditor.nextChange",
        "when": "textCompareEditorVisible"
    },
    {
        "key": "alt+h",
        "command": "workbench.action.editor.nextChange",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+f5",
        "command": "-workbench.action.editor.nextChange",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+meta+h",
        "command": "editor.action.dirtydiff.next",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+f3",
        "command": "-editor.action.dirtydiff.next",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+e",
        "command": "editor.action.smartSelect.expand",
        "when": "editorTextFocus"
    },
    {
        "key": "f2 enter",
        "command": "workbench.action.keepEditor"
    },
    {
        "key": "shift+f2",
        "command": "renameFile"
    },
    {
        "key": "alt+u",
        "command": "editor.action.transformToUppercase"
    },
    {
        "key": "alt+l",
        "command": "editor.action.transformToLowercase"
    },
    {
        "key": "f2 m",
        "command": "workbench.action.editor.changeLanguageMode"
    },
    {
        "key": "ctrl+k m",
        "command": "-workbench.action.editor.changeLanguageMode"
    },
    {
        "key": "alt+j",
        "command": "editor.action.joinLines"
    },
    {
        "key": "shift+alt+[",
        "command": "editor.foldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+[",
        "command": "-editor.foldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "shift+alt+]",
        "command": "editor.unfoldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+]",
        "command": "-editor.unfoldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "alt+[",
        "command": "editor.fold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+shift+[",
        "command": "-editor.fold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "alt+]",
        "command": "editor.unfold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+shift+]",
        "command": "-editor.unfold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "alt+;",
        "command": "editor.action.showDefinitionPreviewHover"
    },
    {
        "key": "f6 c",
        "command": "calva.clearInlineResults",
        "when": "calva:keybindingsEnabled && editorTextFocus && !editorHasMultipleSelections && !editorHasSelection && !editorReadOnly && !hasOtherSuggestions && !parameterHintsVisible && !selectionAnchorSet && !suggestWidgetVisible && editorLangId == 'clojure'"
    },
    {
        "key": "escape",
        "command": "-calva.clearInlineResults",
        "when": "calva:keybindingsEnabled && editorTextFocus && !editorHasMultipleSelections && !editorHasSelection && !editorReadOnly && !hasOtherSuggestions && !parameterHintsVisible && !selectionAnchorSet && !suggestWidgetVisible && editorLangId == 'clojure'"
    },
    {
        "key": "f6 right",
        "command": "paredit.forwardSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+right",
        "command": "-paredit.forwardSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "f6 left",
        "command": "paredit.backwardSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+left",
        "command": "-paredit.backwardSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "f6 end",
        "command": "paredit.closeList",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+end",
        "command": "-paredit.closeList",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "f6 home",
        "command": "paredit.openList",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+home",
        "command": "-paredit.openList",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "f6 down",
        "command": "paredit.forwardDownSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+down",
        "command": "-paredit.forwardDownSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "f6 up",
        "command": "paredit.forwardUpSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+down",
        "command": "-paredit.forwardUpSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "f6 pagedown",
        "command": "paredit.backwardDownSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+up",
        "command": "-paredit.backwardDownSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "f6 pageup",
        "command": "paredit.backwardUpSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+up",
        "command": "-paredit.backwardUpSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "f6 backspace",
        "command": "paredit.spliceSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+s",
        "command": "-paredit.spliceSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "f6 .",
        "command": "paredit.slurpSexpForward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+.",
        "command": "-paredit.slurpSexpForward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "f6 ,",
        "command": "paredit.slurpSexpBackward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+alt+left",
        "command": "-paredit.slurpSexpBackward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "f6 ;",
        "command": "paredit.barfSexpBackward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+alt+right",
        "command": "-paredit.barfSexpBackward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "f6 '",
        "command": "paredit.barfSexpForward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+,",
        "command": "-paredit.barfSexpForward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "f6 shift+right",
        "command": "paredit.sexpRangeExpansion",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "shift+alt+right",
        "command": "-paredit.sexpRangeExpansion",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "f6 shift+left",
        "command": "paredit.sexpRangeContraction",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "shift+alt+left",
        "command": "-paredit.sexpRangeContraction",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "f6 s",
        "command": "calva.selectCurrentForm",
        "when": "calva:keybindingsEnabled"
    },
    {
        "key": "ctrl+alt+c ctrl+s",
        "command": "-calva.selectCurrentForm",
        "when": "calva:keybindingsEnabled"
    },
    {
        "key": "f6 p",
        "command": "calva.printLastStacktrace",
        "when": "calva:connected && calva:keybindingsEnabled"
    },
    {
        "key": "ctrl+alt+c ctrl+alt+p",
        "command": "-calva.printLastStacktrace",
        "when": "calva:connected && calva:keybindingsEnabled"
    },
    {
        "key": "ctrl+shift+up",
        "command": "-paredit.selectBackwardUpSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+down",
        "command": "-paredit.selectForwardDownSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+down",
        "command": "-paredit.selectForwardDownSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+up",
        "command": "-paredit.selectBackwardUpSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "tab",
        "command": "-whichkey.triggerKey",
        "when": "whichkeyVisible"
    },
    {
        "key": "alt+i",
        "command": "editor.action.showHover",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+k ctrl+i",
        "command": "-editor.action.showHover",
        "when": "editorTextFocus"
    },
    {
        "key": "f9",
        "command": "-editor.debug.action.toggleBreakpoint",
        "when": "debuggersAvailable && editorTextFocus"
    },
    {
        "key": "f9",
        "command": "workbench.action.navigateBack"
    },
    {
        "key": "ctrl+alt+-",
        "command": "-workbench.action.navigateBack"
    },
    {
        "key": "f10",
        "command": "workbench.action.navigateForward"
    },
    {
        "key": "ctrl+shift+-",
        "command": "-workbench.action.navigateForward"
    },
    {
        "key": "ctrl+f8",
        "command": "editor.action.formatSelection",
        "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+k ctrl+f",
        "command": "-editor.action.formatSelection",
        "when": "editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+f8",
        "command": "-editor.action.marker.next",
        "when": "editorFocus"
    },
    {
        "key": "alt+p",
        "command": "editor.action.marker.next",
        "when": "editorFocus"
    },
    {
        "key": "alt+insert",
        "command": "git.stageSelectedRanges",
        "when": "isInDiffEditor"
    },
    {
        "key": "ctrl+k ctrl+alt+s",
        "command": "-git.stageSelectedRanges",
        "when": "isInDiffEditor"
    },
    {
        "key": "f2 a",
        "command": "workbench.action.focusActiveEditorGroup"
    },
    // {
        // "key": "your key",
        // "command": "extension.aceJump"
    // },
    {
        "key": "alt+p",
        "command": "-togglePreserveCase",
        "when": "editorFocus"
    },
    {
        "key": "alt+p",
        "command": "-toggleSearchPreserveCase",
        "when": "searchViewletFocus"
    },
    {
        "key": "alt+backspace",
        "command": "git.revertSelectedRanges",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+k ctrl+r",
        "command": "-git.revertSelectedRanges",
        "when": "isInDiffEditor"
    },
    {
        "key": "alt+n",
        "command": "extension.toggle",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+r",
        "command": "-extension.toggle",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+b",
        "command": "breadcrumbs.focusAndSelect",
        "when": "breadcrumbsPossible"
    },
    {
        "key": "ctrl+shift+.",
        "command": "-breadcrumbs.focusAndSelect",
        "when": "breadcrumbsPossible"
    },
    {
        "key": "alt+`",
        "command": "workbench.action.terminal.runSelectedText"
    },
    {
        "key": "F5 space",
        "command": "workbench.action.terminal.sendSequence",
        "args": {
            "text": "\u001b[A\u000d"
        }
    },
    {
        "key": "f2 d",
        "command": "workbench.view.debug",
        "when": "viewContainer.workbench.view.debug.enabled"
    },
    {
        "key": "ctrl+shift+d",
        "command": "-workbench.view.debug",
        "when": "viewContainer.workbench.view.debug.enabled"
    },
    {
        "key": "f2 r",
        "command": "editor.action.goToReferences",
        "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "shift+f12",
        "command": "-editor.action.goToReferences",
        "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "f7 f7",
        "command": "workbench.action.debug.continue",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "f5",
        "command": "-workbench.action.debug.continue",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "f7 f8",
        "command": "workbench.action.debug.stepOver"
    },
    {
        "key": "f7 down",
        "command": "workbench.action.debug.stepInto",
        "when": "debugState != 'inactive'"
    },
    {
        "key": "f11",
        "command": "-workbench.action.debug.stepInto",
        "when": "debugState != 'inactive'"
    },
    {
        "key": "f7 up",
        "command": "workbench.action.debug.stepOut",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "shift+f11",
        "command": "-workbench.action.debug.stepOut",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "f7 delete",
        "command": "workbench.action.debug.stop",
        "when": "inDebugMode && !focusedSessionIsAttach"
    },
    {
        "key": "shift+f5",
        "command": "-workbench.action.debug.stop",
        "when": "inDebugMode && !focusedSessionIsAttach"
    },
    {
        "key": "f7 insert",
        "command": "workbench.action.debug.start",
        "when": "debuggersAvailable && debugState == 'inactive'"
    },
    {
        "key": "f5",
        "command": "-workbench.action.debug.start",
        "when": "debuggersAvailable && debugState == 'inactive'"
    },
    {
        "key": "ctrl+shift+d",
        "command": "extension.addPHPComment",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+i",
        "command": "-extension.addPHPComment",
        "when": "editorTextFocus"
    },
    {
        "key": "f2 f11",
        "command": "workbench.action.toggleEditorWidths"
    },
    {
        "key": "f2 c",
        "command": "workbench.debug.action.toggleRepl",
        "when": "workbench.panel.repl.view.active"
    },
    {
        "key": "ctrl+shift+y",
        "command": "-workbench.debug.action.toggleRepl",
        "when": "workbench.panel.repl.view.active"
    },
    {
        "key": "f2 w",
        "command": "workbench.debug.action.focusWatchView"
    },
    {
        "key": "shift+f9",
        "command": "-editor.debug.action.toggleInlineBreakpoint",
        "when": "editorTextFocus"
    },
    {
        "key": "f7 space",
        "command": "editor.debug.action.toggleBreakpoint"
    }
]
